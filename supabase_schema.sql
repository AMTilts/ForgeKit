-- Supabase Schema for ForgeKit

    -- Enable Row Level Security (RLS)
    -- Make sure to define policies after creating tables

    -- Templates Table
    CREATE TABLE templates (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, -- Link to Clerk user via auth.users if synced, otherwise use Clerk user ID directly
        name TEXT NOT NULL,
        description TEXT,
        github_url TEXT NOT NULL UNIQUE, -- Ensure unique GitHub URLs per user? Or globally? Consider constraints.
        parsed_schema JSONB, -- Store the parsed .forgekit.yaml structure
        created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
        updated_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
    );

    -- Add indexes for common queries
    CREATE INDEX idx_templates_user_id ON templates(user_id);

    -- Enable RLS for templates table
    ALTER TABLE templates ENABLE ROW LEVEL SECURITY;

    -- Example RLS Policies (Adjust based on your needs)
    -- Allow users to see their own templates
    CREATE POLICY "Allow users to select own templates" ON templates
        FOR SELECT USING (auth.uid() = user_id);

    -- Allow users to insert their own templates
    CREATE POLICY "Allow users to insert own templates" ON templates
        FOR INSERT WITH CHECK (auth.uid() = user_id);

    -- Allow users to update their own templates
    CREATE POLICY "Allow users to update own templates" ON templates
        FOR UPDATE USING (auth.uid() = user_id);

     -- Allow users to delete their own templates
    CREATE POLICY "Allow users to delete own templates" ON templates
        FOR DELETE USING (auth.uid() = user_id);


    -- Generation Jobs Table
    CREATE TABLE generation_jobs (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
        template_id BIGINT NOT NULL REFERENCES templates(id) ON DELETE CASCADE, -- Link to the template used
        status TEXT NOT NULL CHECK (status IN ('pending', 'processing', 'completed', 'failed')), -- Job status
        input_data JSONB NOT NULL, -- Store the user-provided inputs for the template variables
        output_url TEXT, -- Link to the generated output (e.g., a file in Supabase Storage)
        error_message TEXT, -- Store error details if the job failed
        created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
        updated_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
    );

    -- Add indexes for common queries
    CREATE INDEX idx_generation_jobs_user_id ON generation_jobs(user_id);
    CREATE INDEX idx_generation_jobs_template_id ON generation_jobs(template_id);
    CREATE INDEX idx_generation_jobs_status ON generation_jobs(status);

    -- Enable RLS for generation_jobs table
    ALTER TABLE generation_jobs ENABLE ROW LEVEL SECURITY;

    -- Example RLS Policies (Adjust based on your needs)
     -- Allow users to see their own jobs
    CREATE POLICY "Allow users to select own jobs" ON generation_jobs
        FOR SELECT USING (auth.uid() = user_id);

    -- Allow users to insert their own jobs
    CREATE POLICY "Allow users to insert own jobs" ON generation_jobs
        FOR INSERT WITH CHECK (auth.uid() = user_id);

    -- Allow users to update status/output of their own jobs (or maybe only backend processes update?)
    -- Be cautious with update policies. Often only backend roles should update status.
    -- Example: Allow user to update only if job is theirs (Restrict columns if needed)
    CREATE POLICY "Allow users to update own jobs" ON generation_jobs
        FOR UPDATE USING (auth.uid() = user_id);

    -- Allow users to delete their own jobs (Consider if deletion is allowed or if jobs are archived)
    CREATE POLICY "Allow users to delete own jobs" ON generation_jobs
        FOR DELETE USING (auth.uid() = user_id);


    -- Function to automatically update 'updated_at' timestamp
    CREATE OR REPLACE FUNCTION public.handle_updated_at()
    RETURNS TRIGGER AS $$
    BEGIN
      NEW.updated_at = timezone('utc'::text, now());
      RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;

    -- Trigger for templates table
    CREATE TRIGGER on_templates_updated
      BEFORE UPDATE ON public.templates
      FOR EACH ROW
      EXECUTE PROCEDURE public.handle_updated_at();

    -- Trigger for generation_jobs table
    CREATE TRIGGER on_generation_jobs_updated
      BEFORE UPDATE ON public.generation_jobs
      FOR EACH ROW
      EXECUTE PROCEDURE public.handle_updated_at();
